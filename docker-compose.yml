
services:

  lancamentos:
    build:
      context: ./lancamento_service
      dockerfile: Dockerfile
    container_name: lancamentos
    env_file: .env
    environment:
      ENV: development
      LOG_FILE: /var/log/app.log
    volumes:
      - ./logs:/var/log
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "5000:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"

  consolidado:
    build:
      context: ./consolidado_service
      dockerfile: Dockerfile
    env_file: .env
    environment:
      ENV: development
      LOG_FILE: /var/log/app.log
    depends_on:
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "5001:5001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 5s
    logging:
      driver: json-file
      options:
        max-size: "10m"

  celery_worker:
    build:
      context: ./workers
    env_file: .env
    environment:
      CELERY_BROKER_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:${RABBITMQ_PORT}
      CELERY_RESULT_BACKEND: redis://redis:${REDIS_PORT}/${REDIS_DB}
    depends_on:
      - rabbitmq
      - redis
      - elasticsearch

  postgres:
    image: postgres:15-alpine
    env_file: .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    command: redis-server --save 60 1 --loglevel verbose
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
    logging:
      driver: json-file
      options:
        max-size: "5m"

  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    env_file: .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
    ports:
      - "15672:15672"
    logging:
      driver: json-file
      options:
        max-size: "10m"

  elasticsearch:
    image: elasticsearch:8.7.1
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms1g -Xmx1g
      xpack.security.enabled: "false"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
    ulimits:
      memlock:
        soft: -1
        hard: -1
    logging:
      driver: json-file
      options:
        max-size: "20m"

  jaeger:
    image: jaegertracing/all-in-one:1.48
    ports:
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  es_data:
